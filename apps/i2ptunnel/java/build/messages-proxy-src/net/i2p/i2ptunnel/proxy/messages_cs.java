/* Automatically generated by GNU msgfmt.  Do not modify!  */
package net.i2p.i2ptunnel.proxy;
public class messages_cs extends java.util.ResourceBundle {
  private static final java.lang.String[] table;
  static {
    java.lang.String[] t = new java.lang.String[80];
    t[0] = "";
    t[1] = "Project-Id-Version: I2P\nReport-Msgid-Bugs-To: \nPO-Revision-Date: 2021-07-08 12:49+0000\nLast-Translator: slrslr\nLanguage-Team: Czech (http://www.transifex.com/otf/I2P/language/cs/)\nMIME-Version: 1.0\nContent-Type: text/plain; charset=UTF-8\nContent-Transfer-Encoding: 8bit\nLanguage: cs\nPlural-Forms: nplurals=4; plural=(n == 1 && n % 1 == 0) ? 0 : (n >= 2 && n <= 4 && n % 1 == 0) ? 1: (n % 1 != 0 ) ? 2 : 3;\n";
    t[4] = "Encryption key";
    t[5] = "Bezpe\u010dnostn\u00ed k\u00f3d";
    t[10] = "Generate";
    t[11] = "Vygenerovat";
    t[16] = "Router Console";
    t[17] = "Konzole routeru";
    t[18] = "I2P Router Console";
    t[19] = "I2P konzole routeru";
    t[28] = "Destination";
    t[29] = "C\u00edl";
    t[30] = "Destination lease set not found";
    t[31] = "C\u00edlov\u00e1 sada pron\u00e1jmu nebyla nalezena";
    t[38] = "Warning: Invalid Destination";
    t[39] = "C\u00edl tunelu";
    t[42] = "Could not find the following destination:";
    t[43] = "jm\u00e9no nebo c\u00edl";
    t[44] = "Configuration";
    t[45] = "Konfigurace";
    t[46] = "This seems to be a bad destination:";
    t[47] = "jm\u00e9no nebo c\u00edl";
    t[48] = "Host";
    t[49] = "Host";
    t[50] = "Information: New Host Name";
    t[51] = "Informace: Nov\u00e9 jm\u00e9no hostitele";
    t[54] = "private";
    t[55] = "soukrom\u00e9";
    t[58] = "Addressbook";
    t[59] = "Adres\u00e1\u0159";
    t[66] = "Help";
    t[67] = "Pomoc";
    t[74] = "Address Book";
    t[75] = "Adres\u00e1\u0159";
    table = t;
  }
  public java.lang.Object handleGetObject (java.lang.String msgid) throws java.util.MissingResourceException {
    int hash_val = msgid.hashCode() & 0x7fffffff;
    int idx = (hash_val % 40) << 1;
    java.lang.Object found = table[idx];
    if (found != null && msgid.equals(found))
      return table[idx + 1];
    return null;
  }
  public java.util.Enumeration getKeys () {
    return
      new java.util.Enumeration() {
        private int idx = 0;
        { while (idx < 80 && table[idx] == null) idx += 2; }
        public boolean hasMoreElements () {
          return (idx < 80);
        }
        public java.lang.Object nextElement () {
          java.lang.Object key = table[idx];
          do idx += 2; while (idx < 80 && table[idx] == null);
          return key;
        }
      };
  }
  public java.util.ResourceBundle getParent () {
    return parent;
  }
}

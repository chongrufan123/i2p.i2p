/* Automatically generated by GNU msgfmt.  Do not modify!  */
package net.i2p.router.util;
public class messages_nb extends java.util.ResourceBundle {
  private static final java.lang.String[] table;
  static {
    java.lang.String[] t = new java.lang.String[182];
    t[0] = "";
    t[1] = "Project-Id-Version: I2P\nReport-Msgid-Bugs-To: \nPO-Revision-Date: 2019-11-24 13:40+0000\nLast-Translator: Mikal <mikalv@mikalv.net>\nLanguage-Team: Norwegian Bokm\u00e5l (http://www.transifex.com/otf/I2P/language/nb/)\nLanguage: nb\nMIME-Version: 1.0\nContent-Type: text/plain; charset=UTF-8\nContent-Transfer-Encoding: 8bit\nPlural-Forms: nplurals=2; plural=(n != 1);\n";
    t[2] = "Firewalled";
    t[3] = "Bak brannmur";
    t[18] = "Rejecting tunnels";
    t[19] = "Avviser tunneler";
    t[24] = "IPv4: Testing; IPv6: OK";
    t[25] = "IPv4: Tester; IPv6: OK";
    t[26] = "Accepting most tunnels";
    t[27] = "Godtar de fleste tunneler";
    t[40] = "Rejecting tunnels: Shutting down";
    t[41] = "Avviser tunneler: Avslutter";
    t[42] = "Rejecting tunnels: Starting up";
    t[43] = "Nekter adgang til tunnelene. Starter opp";
    t[44] = "Dropping tunnel requests: Overloaded";
    t[45] = "Dropper tunnelforesp\u00f8rsler: Overbelastet";
    t[46] = "Rejecting tunnels: Request overload";
    t[47] = "Avviser tunneler: Foresp\u00f8rselsoverbelastning";
    t[48] = "Rejecting tunnels: Hidden mode";
    t[49] = "Avviser tunneler: Skjult modus";
    t[50] = "Rejecting tunnels: Connection limit";
    t[51] = "Avviser tunneler: Tilkoblingsgrensen er n\u00e5dd";
    t[52] = "IPv4: Firewalled; IPv6: Testing";
    t[53] = "IPv4: Bak brannmur; IPv6: Tester";
    t[56] = "IPv4: Disabled; IPv6: OK";
    t[57] = "IPv4: Avskrudd; IPv6: OK";
    t[62] = "Dropping tunnel requests: Too slow";
    t[63] = "Dropper tunnelforesp\u00f8rsler: For treg";
    t[64] = "IPv4: Symmetric NAT; IPv6: OK";
    t[65] = "IPv4: Symmetrisk NAT; IPv6: OK";
    t[72] = "Rejecting most tunnels: High number of requests";
    t[73] = "Avviser de fleste tunneler: H\u00f8yt antall foresp\u00f8rsler";
    t[76] = "Accepting tunnels";
    t[77] = "Godtar tunneler";
    t[80] = "Rejecting tunnels: Bandwidth limit";
    t[81] = "Avviser tunneler: B\u00e5ndbreddegrense";
    t[92] = "Symmetric NAT";
    t[93] = "Symmetrisk NAT";
    t[96] = "Dropping tunnel requests: Queue time";
    t[97] = "Dropper tunneler foresp\u00f8rsler: K\u00f8tid";
    t[100] = "Port Conflict";
    t[101] = "Portkonflikt";
    t[108] = "IPv4: Symmetric NAT; IPv6: Testing";
    t[109] = "IPv4: Symmetrisk NAT; IPv6: Tester";
    t[112] = "IPv4: Testing; IPv6: Firewalled";
    t[113] = "IPv4: Tester; IPv6: Bak brannmur";
    t[114] = "IPv4: Disabled; IPv6: Testing";
    t[115] = "IPv4: Avskrudd; IPv6: Tester";
    t[126] = "IPv4: OK; IPv6: Firewalled";
    t[127] = "IPv4: OK; IPv6: Bak brannmur";
    t[128] = "Dropping tunnel requests: High load";
    t[129] = "Dropper tunnelforesp\u00f8rsler: H\u00f8y last";
    t[134] = "OK";
    t[135] = "OK";
    t[138] = "Testing";
    t[139] = "Tester";
    t[142] = "IPv4: Disabled; IPv6: Firewalled";
    t[143] = "IPv4: Avskrudd; IPv6: Bak brannmur";
    t[146] = "Disconnected";
    t[147] = "Frakoblet";
    t[152] = "IPv4: OK; IPv6: Testing";
    t[153] = "IPv4: OK; IPv6: Tester";
    t[154] = "Rejecting tunnels: Limit reached";
    t[155] = "Avviser tunneler: Grense n\u00e5dd";
    t[164] = "Rejecting tunnels: High message delay";
    t[165] = "Avviser tunneler: H\u00f8y melding forsinkelse";
    t[170] = "Rejecting most tunnels: Bandwidth limit";
    t[171] = "Avviser fleste tunneler: B\u00e5ndbreddegrense";
    t[174] = "IPv4: Firewalled; IPv6: OK";
    t[175] = "IPv4: Bak brannmur; IPv6: OK";
    table = t;
  }
  public java.lang.Object handleGetObject (java.lang.String msgid) throws java.util.MissingResourceException {
    int hash_val = msgid.hashCode() & 0x7fffffff;
    int idx = (hash_val % 91) << 1;
    {
      java.lang.Object found = table[idx];
      if (found == null)
        return null;
      if (msgid.equals(found))
        return table[idx + 1];
    }
    int incr = ((hash_val % 89) + 1) << 1;
    for (;;) {
      idx += incr;
      if (idx >= 182)
        idx -= 182;
      java.lang.Object found = table[idx];
      if (found == null)
        return null;
      if (msgid.equals(found))
        return table[idx + 1];
    }
  }
  public java.util.Enumeration getKeys () {
    return
      new java.util.Enumeration() {
        private int idx = 0;
        { while (idx < 182 && table[idx] == null) idx += 2; }
        public boolean hasMoreElements () {
          return (idx < 182);
        }
        public java.lang.Object nextElement () {
          java.lang.Object key = table[idx];
          do idx += 2; while (idx < 182 && table[idx] == null);
          return key;
        }
      };
  }
  public java.util.ResourceBundle getParent () {
    return parent;
  }
}
